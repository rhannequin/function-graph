// Generated by CoffeeScript 1.4.0
(function() {
  var axes, clearFunction, ctx, funGraph, func, i, lauch;

  lauch = function() {
    var canvas, h, w, x0, xmin, y0;
    canvas = document.getElementById('canvas');
    axes.x0 = .5 + .5 * canvas.width;
    axes.y0 = .5 + .5 * canvas.height;
    axes.scale = 20;
    axes.doNegativeX = true;
    x0 = axes.x0;
    w = ctx.canvas.width;
    y0 = axes.y0;
    h = ctx.canvas.height;
    xmin = axes.doNegativeX ? 0 : x0;
    ctx.beginPath();
    ctx.strokeStyle = 'rgb(128,128,128)';
    ctx.moveTo(xmin, y0);
    ctx.lineTo(w, y0);
    ctx.moveTo(x0, 0);
    ctx.lineTo(x0, h);
    return ctx.stroke();
  };

  if (typeof canvas !== 'undefined' && typeof canvas.getContext !== 'undefined') {
    axes = {};
    ctx = canvas.getContext('2d');
    lauch();
  }

  funGraph = function(func, i) {
    var color, context, cv, dx, iMax, iMin, scale, str, thick, x0, xx, y0, yy;
    str = '<canvas class="graph" id="canvas' + i + '" width="1000" height="500"></canvas>';
    $('.canvas-box').append(str);
    cv = document.getElementById('canvas' + i);
    context = cv.getContext('2d');
    color = 'rgb(66,44,255)';
    thick = 1;
    dx = 4;
    x0 = axes.x0;
    y0 = axes.y0;
    scale = axes.scale;
    iMax = Math.round((context.canvas.width - x0) / dx);
    iMin = axes.doNegativeX ? Math.round(-x0 / dx) : 0;
    context.beginPath();
    context.lineWidth = thick;
    context.strokeStyle = color;
    i = iMin;
    while (true) {
      xx = dx * i;
      yy = scale * func(xx / scale);
      if (i === iMin) {
        context.moveTo(x0 + xx, y0 - yy);
      } else {
        context.lineTo(x0 + xx, y0 - yy);
      }
      i = i + 0.1;
      if (i > iMax) {
        break;
      }
    }
    return context.stroke();
  };

  clearFunction = function(number) {
    return $('#canvas' + number).remove();
  };

  i = 0;

  func = function(x) {
    return Math.log(x);
  };

  funGraph(func, i++);

  $('input:submit').click(function() {
    var val;
    val = $('input[type="text"]').val();
    func = function(x) {
      return eval(val);
    };
    return funGraph(func, i++);
  });

}).call(this);
